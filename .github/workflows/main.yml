name: Build and Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd client
          pnpm install --frozen-lockfile --prefer-offline

      - name: Run ESLint
        run: |
          cd client
          if grep -q '"lint"' package.json; then
            pnpm run lint
          else
            echo "No lint script found, skipping ESLint"
          fi
        continue-on-error: false

      - name: Run type check (if TypeScript)
        run: |
          cd client
          if [ -f "tsconfig.json" ] && grep -q '"type-check"' package.json; then
            pnpm run type-check
          else
            echo "No TypeScript configuration or type-check script found, skipping type check"
          fi
        continue-on-error: false

      - name: Run tests
        run: |
          cd client
          if grep -q '"test"' package.json; then
            pnpm run test -- --run --reporter=verbose
          else
            echo "No test script found, skipping tests"
          fi
        continue-on-error: false

      - name: Build application
        run: |
          cd client
          pnpm run build
        env:
          NODE_ENV: production
          CI: true

      - name: Verify build output
        run: |
          cd client
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed: index.html not found in dist"
            exit 1
          fi
          echo "‚úÖ Build successful: dist directory contains required files"
          ls -la dist/

      - name: Setup Pages
        if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: matrix.node-version == '20.x' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './client/dist'

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Verify ACTION_TOKEN
        env:
          ACTION_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          if [ -z "$ACTION_TOKEN" ]; then
            echo "‚ùå ACTION_TOKEN secret is not set"
            exit 1
          fi
          echo "‚úÖ ACTION_TOKEN is configured and ready for deployment"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}

      - name: Post-deployment verification
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üìù Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "‚è∞ Deployed at: $(date)"

  # Health check job (runs after deployment)
  health-check:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Wait for deployment to propagate
        run: sleep 30

      - name: Check site accessibility
        run: |
          SITE_URL="${{ needs.deploy.outputs.page_url }}"
          if [ -n "$SITE_URL" ]; then
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Site is accessible (HTTP $HTTP_STATUS)"
            else
              echo "‚ö†Ô∏è  Site returned HTTP $HTTP_STATUS"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  Site URL not available for health check"
          fi
